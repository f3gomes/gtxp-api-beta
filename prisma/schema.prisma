// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  congressId      String
  pmiId           String
  profileImgUrl   String
  name            String
  email           String      @unique
  phone           String
  role            String
  company         String
  areas           String[]
  description     String?
  linkedin        String
  instagram       String
  twitter         String
  password        String
  visible         Boolean
  type            UserType
  posts           Post[]
  feedbacks       Feedback[]
  appointments    Appointment[]
  verified        Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  resetToken      String?     @unique
  expiresAt       DateTime?

  @@map("users")
}

model Appointment {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  local           String
  description     String
  limit           Int
  date            DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("appointments")
}

model Post {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  name            String
  email           String
  message         String
  imgUrl          String?
  profileImg      String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("posts")
}


enum UserType {
  CONGRESSMAN
  SPEAKER
}

model Feedback {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  name            String
  email           String
  message         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("feedbacks")
}
